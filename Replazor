#!/bin/bash

###---------------------------------------------------------------------// Notes
#
# This tool was made to perform a quick search and replace in large 
# numbers of text files.
# USE AT YOUR OWN PERIL, ALWAYS PERFORM A BACKUP FIRST!
#
# @author frederic charette<fredericcharette@gmail.com>
# @repo github.com/fed135/Replazor
# @licence GNU GPL 2.0
#
# Roadmap:
#  - Increase portability
#  - Cleanup
#  - Include manual
#  - Fix line numbers (get offsetted on reading empty lines)
#  - Increase performances
#
###-----------------------------------------------------------------// Variables

filter="*"
directory="$PWD"
needle=""
replacement=""
filechanged=0

line=""

###--------------------------------------------------------------------// Colors

YELLOW_COLOR="\033[0;33m"   #Filter
RED_COLOR="\033[1;31m"      #Errors/Keep
GREEN_COLOR="\033[1;32m"    #Resolved
GRAY_COLOR="\033[0;37m"     #Pending
CYAN_COLOR="\033[1;36m"     #String found

RESET="\e[0m"

###--------------------------------------------------------------------// States

PENDING=$RESET"[-]"$GRAY_COLOR
RESOLVED=$GREEN_COLOR"[Y]"$GRAY_COLOR
KEEP=$RED_COLOR"[X]"$GRAY_COLOR

###------------------------------------------------------------// Initialization

#Not clean, but I'm lazy
if [ $# -lt 2 ] ; then
  echo -e $RED_COLOR"Invalid parameters"$RESET
  exit 0
fi

needle="$1"
replacement="$2"
if [ $# -ge 3 ] ; then
  directory="$3"
fi
if [ $# -ge 4 ] ; then
  filter="$4"
fi

###-------------------------------------------------------------------// Methods

#Uses the global settings to check files for the desired key
main () {
  local file
  local lines
  local newfile=""
  local lineno=0
  local prevline=""
  local nextline=""

  echo -e "Starting search in $YELLOW_COLOR$directory$RESET for $filter..."

  for f in $(find "$directory" -name $filter) ; do
    newfile=""
    filechanged=0
    lineno=0
    echo " "
    echo -e "  Scanning:"$YELLOW_COLOR"$f"$RESET"..."
    
    IFS=$'\n' 
    for newline in $(cat $f) ; do
      ((lineno++))
      #echo "    line $lineno : $newline"
      #echo "replacing $needle with $PENDING$needle in $newline"
      mapfile -s $(($lineno+1)) nextline < $f
      line=${newline//$needle/${PENDING}${needle}}
      while [[ $line == *"$PENDING$needle"* ]] ; do
        replace_in_line "$f" "$lineno" "$prevline" "$nextline"
      done
      if [[ $lineno != 1 ]] ; then
        prevline="$newline"
      fi
    done

    newfile+=$line$'\n'

    if [[ $newfile == *"$RESOLVED"* ]] ; then
      newfile=${newfile//"$KEEP$needle"/"$needle"}
      newfile=${newfile//"$RESOLVED$replacement"/"$replacement"}

      echo " "
      echo " "
      echo -e "    "$GREEN_COLOR$filechanged$RESET" Change(s)"
      echo -e $GREEN_COLOR"    Saving"$RESET
      echo "$newfile" > "$f"
    fi
  done
}

#For every instance of the needle in the file line, ask to change
replace_in_line () {
  local sub=${line/"$PENDING$needle"/"$CYAN_COLOR$needle$GRAY_COLOR"}
  sub=${sub/"$PENDING$needle"/"$needle"}
  prevlineno=$(($2-1))

  echo -e "    "$CYAN_COLOR"Found"$RESET" string at line "$2
  if [[ $3 != "" ]] ; then
    echo -e "      (line $(($2-1))):"$GRAY_COLOR$3$RESET
  fi
  echo -e "      (line $2):"$GRAY_COLOR$sub$RESET
  echo -e "      (line $(($2+1))):"$GRAY_COLOR$4$RESET
  echo " "
  #echo $line
  read -p "    -> Replace with \"$replacement\" (y/n) " -n 1 -r
  echo " "
  if [[ $REPLY =~ ^[Yy]$ ]] ; then
    ((filechanged++))
    line=${line/"$PENDING$needle"/"$RESOLVED$replacement"}
  else
    line=${line/"$PENDING$needle"/"$KEEP$needle"}
  fi
}

###-------------------------------------------------------------// Program Start

main